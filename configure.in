AC_INIT(configure.in)

dnl we to AC_DIVERT_PUSH/AC_DIVERT_POP these variable definitions so they
dnl are available for $ac_help expansion (don't we all *love* autoconf?)
#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
# Making releases:
#   GFS_MICRO_VERSION += 1;
#   GFS_INTERFACE_AGE += 1;
#   GFS_BINARY_AGE += 1;
# if any functions have been added, set GFS_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set GFS_BINARY_AGE and GFS_INTERFACE_AGE to 0.
#
GFS_MAJOR_VERSION=1
GFS_MINOR_VERSION=0
GFS_MICRO_VERSION=0
GFS_INTERFACE_AGE=0
GFS_BINARY_AGE=0
GFS_VERSION=$GFS_MAJOR_VERSION.$GFS_MINOR_VERSION.$GFS_MICRO_VERSION
GFS_COMPILATION_FLAGS=$CFLAGS
dnl
#AC_DIVERT_POP()dnl

AC_SUBST(GFS_MAJOR_VERSION)
AC_SUBST(GFS_MINOR_VERSION)
AC_SUBST(GFS_MICRO_VERSION)
AC_SUBST(GFS_VERSION)
AC_SUBST(GFS_COMPILATION_FLAGS)

# libtool versioning
LT_RELEASE=$GFS_MAJOR_VERSION.$GFS_MINOR_VERSION
LT_CURRENT=`expr $GFS_MICRO_VERSION - $GFS_INTERFACE_AGE`
LT_REVISION=$GFS_INTERFACE_AGE
LT_AGE=`expr $GFS_BINARY_AGE - $GFS_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

# For automake.
VERSION=$GFS_VERSION
PACKAGE=gerris

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

# Specify a configuration file
AM_CONFIG_HEADER(config.h)

AC_DEFINE_UNQUOTED(GFS_MAJOR_VERSION, $GFS_MAJOR_VERSION, [Major version])
AC_DEFINE_UNQUOTED(GFS_MINOR_VERSION, $GFS_MINOR_VERSION, [Minor version])
AC_DEFINE_UNQUOTED(GFS_MICRO_VERSION, $GFS_MICRO_VERSION, [Micro version])
AC_DEFINE_UNQUOTED(GFS_INTERFACE_AGE, $GFS_INTERFACE_AGE, [Interface age])
AC_DEFINE_UNQUOTED(GFS_BINARY_AGE, $GFS_BINARY_AGE,       [Binary age])
AC_DEFINE_UNQUOTED(GFS_VERSION, "$GFS_VERSION",           [Version])
AC_DEFINE_UNQUOTED(GFS_COMPILATION_FLAGS, "$GFS_COMPILATION_FLAGS", [Compilation flags])

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

AC_ARG_WITH(mpicc,
              [  --with-mpicc=path       pick a specific path to mpicc],
              [with_mpicc=$withval],
              [with_mpicc=''])

# check if MPI support is disabled
AC_ARG_ENABLE(mpi,
[  --disable-mpi           do not compile MPI support],
[ case "${enableval}" in
	yes) ;;
	*) with_mpicc=no ;;
  esac])

if test "x$with_mpicc" != "xno" ; then
  if test "x$with_mpicc" != "x" ; then
     if test -x "$with_mpicc" ; then
       use_mpicc=yes
       CC="$with_mpicc"
     fi
  else
     AC_CHECK_PROG(use_mpicc, mpicc, yes)
     if test "x$use_mpicc" = "xyes" ; then
       CC=mpicc
     fi
  fi
  if test "x$use_mpicc" = "xyes" ; then
     AC_DEFINE(HAVE_MPI, 1, [Define to 1 if you have MPI])
  else
     AC_MSG_WARN([MPI not found. No MPI support will be compiled in.])
  fi
fi
AM_CONDITIONAL(HAVE_MPI, test "x$use_mpicc" = "xyes")

AC_PROG_CC

if test x$GCC = xyes ; then
  CFLAGS="$CFLAGS -Wall -Werror-implicit-function-declaration -Wmissing-prototypes -Wmissing-declarations -pipe"
fi

dnl Initialize libtool
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

dnl Enable verbose output from libtool (enable libtool's default)
AC_ARG_ENABLE(libtool-verbose,
	      [  --enable-libtool-verbose enable verbose libtool output (default disabled)],
	      [with_libtool_verbose=$enableval],
	      [with_libtool_verbose='no'])
if test "$with_libtool_verbose" = 'no'
then
  LIBTOOL="$LIBTOOL --silent"
fi

dnl Fix for MacOSX and cygwin libtool
case "$build" in
  *-apple-darwin*) NO_UNDEFINED="-module" ;;
  *-pc-cygwin*)    NO_UNDEFINED="" ;;
  *)               NO_UNDEFINED="-no-undefined" ;;
esac
AC_SUBST(NO_UNDEFINED)

AC_PROG_AWK
AC_ISC_POSIX
AC_HEADER_STDC

# check that pointers can be stored in doubles
AC_MSG_CHECKING(whether pointers can be stored in doubles)
AC_TRY_RUN([
main () {
  if (sizeof (void *) > sizeof (double))
    return 1;
  return 0;
}
], can_store_pointers=yes, can_store_pointers=no,
[can_store_pointers=yes; echo $ac_n "cross compiling; assumed OK... $ac_c"])
AC_MSG_RESULT($can_store_pointers)
if test x$can_store_pointers = xno ; then
  AC_MSG_ERROR([
*** Pointers cannot be stored in doubles on this architecture.])
fi

# check if we want to enable GTS casts checks
AC_ARG_ENABLE(gts-check,
[  --enable-gts-check      enable object type cast checks in GTS],
[ case "${enableval}" in
	*) gts_check_casts="--check" ;;
  esac])

if test x$with_gts = xyes ; then
  AC_MSG_ERROR([
*** Directory must be specified for --with-gts])
fi

if test x$with_gts = x ; then 
  # Look for separately installed gts

  AM_PATH_GTS(0.7.4,,
    AC_MSG_ERROR([
*** GTS 0.7.4 or better is required. The latest version of GTS
*** is always available from http://gts.sourceforge.net.]))

  gts_cflags=`$GTS_CONFIG --cflags $gts_check_casts gmodule`
  gts_libs=`$GTS_CONFIG --libs gmodule`
  GTS_LIBS="$gts_libs"
  GTS_DEPLIBS="$gts_libs"
else
  # Use uninstalled gts (assume they got the version right)

  GTS_CONFIG=$with_gts/gts-config
  if test -x $GTS_CONFIG ; then 
    :
  else
    AC_MSG_ERROR([GTS directory ($with_gts) not present or not configured])
  fi

  # For use in gfs-config
  gts_cflags=`$GTS_CONFIG --cflags $gts_check_casts gmodule`
  gts_libs=`$GTS_CONFIG --libs gmodule`
  gts_release=`$GTS_CONFIG --version | sed 's%\\.[[0-9]]*$%%'`

  # canonicalize relative paths
  case $with_gts in 
    /*)
      gts_dir=$with_gts
      ;;
    *)
      gts_dir="\$(top_builddir)/$with_gts"
      ;;
  esac

  GTS_CFLAGS="-I$gts_dir"
  if test -n "$gts_check_casts"; then
	 GTS_CFLAGS="$GTS_CFLAGS -DGTS_CHECK_CASTS"
  fi
  GTS_LIBS="$gts_dir/libgts.la"
  GTS_DEPLIBS=

  AC_SUBST(GTS_LIBS)
fi

if test -n "$gts_check_casts"; then
  GTS_CFLAGS="$GTS_CFLAGS -DGTS_CHECK_CASTS"
fi
AC_SUBST(GTS_CFLAGS)
AC_SUBST(gts_cflags)
AC_SUBST(gts_libs)
AC_SUBST(GTS_DEPLIBS)

# check whether GModules are supported
AC_MSG_CHECKING(whether modules are supported)
OLD_CFLAGS=$CFLAGS
CFLAGS=$gts_cflags
OLD_LIBS=$LIBS
LIBS=$gts_libs
AC_TRY_RUN([
#include <glib.h>
#include <gmodule.h>

main () {
  if (!g_module_supported ())
    return 1;
  return 0;
}
], have_gmodule=yes, have_gmodule=no,
[have_gmodule=yes; echo $ac_n "cross compiling; assumed OK... $ac_c"])
AC_MSG_RESULT($have_gmodule)
CFLAGS=$OLD_CFLAGS
LIBS=$OLD_LIBS

# checks for pkg-config
if test "$have_gmodule" = "yes"; then
  AC_CHECK_PROG(have_pkg_config, pkg-config, yes, no)
  if test "$have_pkg_config" = "no"; then
    AC_MSG_WARN([pkg-config is required for functions in parameter files.])
  fi
fi
if test x"$have_pkg_config" = x"yes"; then
  AC_DEFINE(HAVE_PKG_CONFIG, 1, [Define to 1 if GModule are supported and if you have pkg-config.])
else
  AC_DEFINE(HAVE_PKG_CONFIG, 0)
fi

# check if module support is disabled
AC_ARG_ENABLE(modules,
[  --disable-modules       link modules statically with the executables],
[ case "${enableval}" in
	yes) ;;
	*) have_gmodule=no ;;
  esac])

AC_SUBST(have_gmodule)
AM_CONDITIONAL(HAVE_MODULES, test "$have_gmodule" = "yes")

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

dnl header file checks
AC_CHECK_HEADERS(fpu_control.h,
  AC_CHECK_DECL(_FPU_SETCW, 
                AC_DEFINE(HAVE_FPU_SETCW,,[Define to 1 if you have _FPU_SETCW]),,
                [#include <fpu_control.h>])
)

AC_CHECK_HEADERS(unistd.h, AC_DEFINE(HAVE_UNISTD_H))
AC_CHECK_HEADERS(getopt.h, AC_DEFINE(HAVE_GETOPT_H))

dnl functions checks
AC_CHECK_FUNCS(getopt_long)

dnl generate `src/gfsconfig.h'
AC_OUTPUT_COMMANDS([
	echo creating src/gfsconfig.h
	cat >src/gfsconfig.h <<\__EOF
/* gfsconfig.h
 * 
 * This is a generated file.  Please modify `configure.in'
 */

#ifndef GFSCONFIG_H
#define GFSCONFIG_H

__EOF
        echo "#define GFS_MODULES_DIR \"$libdir\"" >> src/gfsconfig.h
	if test "$have_gmodule" = "yes"; then
	  cat >> src/gfsconfig.h <<\__EOF
#define GFS_HAS_MODULES 1

__EOF
	fi
	case "$build" in
	*-cray-unicos*)
	  echo "/* CRAY inlining directives */" >> src/gfsconfig.h
	  for file in src/*.h; do
	  awk '
BEGIN {
  nc = 10;
  nf = 0;
}
{
  if ($1 == "G_INLINE_FUNC") {
    nc = 0;
    start = 2;
  }
  else
    start = 1;
  for (i = start; i <= NF; i++) {
    if (nc == 1) {
      if (substr ($i, 1, 1) != "*") {
	in_list = 0;
	for (j = 0; j < nf && !inlist; j++)
	  if ($i == f[j])
	    inlist = 1;
	if (!inlist)
          f[nf++] = $i;
	nc = 10;
      }
    }
    else
      nc++;
  }
}
END {
  if (nf > 0) {
    printf ("#pragma _CRI inline %s", f[0]);
    for (i = 1; i < nf; i++)
      printf (", %s", f[i]);
    printf ("\n");
  }
}
' < $file >> src/gfsconfig.h
	done
	;;
	esac
	cat >>src/gfsconfig.h <<__EOF

#endif /* GFSCONFIG_H */
__EOF
],[
	build="$build"
	have_gmodule="$have_gmodule"
        libdir="${prefix}${libdir}/$PACKAGE"
])

dnl generate `src/modules.c'
AC_OUTPUT_COMMANDS([
	echo creating src/modules.c
	cat > src/modules.c <<\__EOF
/* modules.c
 * 
 * This is a generated file.  Please modify `configure.in'
 */

__EOF
	cat > src/modules.h <<\__EOF
/* modules.h
 * 
 * This is a generated file.  Please modify `configure.in'
 */

__EOF
	if test "$have_gmodule" = "no"; then
	  for file in `ls modules/*.mod`; do
		name=`basename $file .mod`
		echo "void gfs_init_$name (void);" >> src/modules.h
		echo "gfs_init_$name ();" >> src/modules.c
	  done
	fi
],[
	have_gmodule="$have_gmodule"
])

dnl export MODULES for src/Makefile.am
MODULES=""
if test "$have_gmodule" = "no"; then
  for file in `ls modules/*.mod`; do
	name=`basename $file .mod`
	MODULES=" $MODULES ../modules/$name.o"
  done	
fi
AC_SUBST(MODULES)
GFS2D_LIBS="\$(top_builddir)/src/libgfs2D.la $GTS_LIBS $MODULES"
GFS3D_LIBS="\$(top_builddir)/src/libgfs3D.la $GTS_LIBS $MODULES"
GFS2D3_LIBS="\$(top_builddir)/src/libgfs2D3.la $GTS_LIBS $MODULES"
AC_SUBST(GFS2D_LIBS)
AC_SUBST(GFS3D_LIBS)
AC_SUBST(GFS2D3_LIBS)

# check whether the code is under darcs

AM_CONDITIONAL(DARCS_CONTROLLED, test -d _darcs)

AC_OUTPUT([
Makefile
src/Makefile
src/gfs-config
src/gerris2D.pc
src/gerris2D3.pc
src/gerris3D.pc
tools/Makefile
modules/Makefile
test/Makefile
doc/Makefile
doc/tutorial/Makefile
doc/examples/Makefile
doc/examples/gfs2doc
desktop/Makefile
])
