# Title: Time-reversed VOF advection in a shear flow
#
# Description:
#
# A test case initially presented by Rudman (Int. J. Num. Meth. Fluids, 1997).
# A circular patch of tracer is advected in a vortical shear flow. At t = 2.5
# the flow direction is reversed. An exact advection scheme would restore the 
# initial circular shape at t = 5.
#
# The VOF (Volume-Of-Fluid) advection scheme is not exact. The initial, intermediate
# and final shape of the interface are represented on Figure \ref{advection}. 
# Figure \ref{error} illustrates the error between the initial and final shapes. The
# corresponding error norms are given in Table \ref{norms}.
#
# Adaptive refinement is used with the gradient of the volume fraction as criterion.
# Eight levels of refinement are used on the interfaces and six away from the interface.
#
# \begin{figure}[htbp]
# \begin{center}
# \begin{tabular}{ccc}
# \includegraphics[width=0.3\hsize]{t-0.eps} &
# \includegraphics[width=0.3\hsize]{t-2.5.eps} &
# \includegraphics[width=0.3\hsize]{t-5.eps} \\
# (a) & (b) & (c)
# \end{tabular}
# \end{center}
# \caption{Volume fraction field at times (a) 0, (b) 2.5 and (c) 5.}
# \label{advection}
# \end{figure}
#
# \begin{figure}[htbp]
# \begin{center}
# \includegraphics[width=0.4\hsize]{dt-5.eps}
# \end{center}
# \caption{Difference between the initial and final volume fraction fields.}
# \label{error}
# \end{figure}
#
# \begin{table}[htbp]
# \begin{center}
# \begin{tabular}{lll}
# $||^1$ & $||^2$ & $||^\infty$ \\
# \input{norms.tex}
# \end{tabular}
# \end{center}
# \caption{Norms of the error between the initial and final fields.}
# \label{norms}
# \end{table}
#
# Author: St\'ephane Popinet
# Command: gerris2D shear.gfs
# Version: 0.6.4
# Required files: circle.gts
# Running time: 2 minutes
# Generated files: t-0.eps t-2.5.eps t-5.eps dt-5.eps norms.tex
#
# The type of the simulation is GfsAdvection which only solves the advection
# of passive tracers.
1 0 GfsAdvection GfsBox GfsGEdge {} {
  Time { end = 5 }
  Refine 8

  # Add tracer T, using a VOF advection scheme.
  # The default scheme is a Van-Leer limited, second-order upwind scheme.
  VariableTracer {} T { scheme = vof }

  # Initialize T as the volume fraction of each cell contained inside the
  # volume defined by circle.gts
  InitFraction {} T circle.gts

  # Initialize U and V with the vortical shear flow field
  Init {} {
    U = sin((x + 0.5)*M_PI)*cos((y + 0.5)*M_PI) 
    V = -cos((x + 0.5)*M_PI)*sin((y + 0.5)*M_PI)
  }

  # At t = 2.5 re-initialize U and V with the reversed flow field
  Init { start = 2.5 } { U = -U V = -V }
 
  # Adapt the mesh dynamically so that at any time the maximum of the gradient
  # of T is less than 1e-2 per cell length
  AdaptGradient { istep = 1 } { cmax = 1e-2 maxlevel = 8 minlevel = 6 } T
 
  # Output progress report on standard error
  OutputProgress { istep = 1 } stderr

  OutputPPM { start = 0 } { convert -colors 256 ppm:- t-0.eps } { v = T }
  OutputPPM { start = 2.5 } { convert -colors 256 ppm:- t-2.5.eps } { v = T }
  OutputPPM { start = 5 } { convert -colors 256 ppm:- t-5.eps } { v = T }

  # Add a new variable 
  Variable {} Tref

  # Initialize Tref with the initial shape
  InitFraction { start = end } Tref circle.gts

  # Output the norms of the difference between T and Tref, stores that into
  # new variable DT
  OutputErrorNorm { start = end } { awk '{print $5 " & " $7 " & " $9}' > norms.tex } { v = T } {
    s = Tref v = DT
  }

  OutputPPM { start = end } { convert -colors 256 ppm:- dt-5.eps } { v = DT }
  OutputTiming { start = end } stderr
}
GfsBox {}
