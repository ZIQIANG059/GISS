<!-- ##### SECTION Title ##### -->
Fully threaded tree

<!-- ##### SECTION Short_Description ##### -->


<!-- ##### SECTION Long_Description ##### -->
<para>

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### ENUM FttCellFlags ##### -->
<para>

</para>

@FTT_FLAG_ID: 
@FTT_FLAG_DESTROYED: 
@FTT_FLAG_LEAF: 

<!-- ##### STRUCT FttCell ##### -->
<para>

</para>

@flags: 
@s: 

<!-- ##### MACRO FTT_CELLS ##### -->
<para>
Evaluates to the maximum number of children of a #FttCell (4 in 2D, 8 in 3D).
</para>



<!-- ##### MACRO FTT_NEIGHBORS ##### -->
<para>
Evaluates to the maximum number of neighbors of a #FttCell (4 in 2D, 6 in 3D).
</para>



<!-- ##### MACRO FTT_CELL_IS_ROOT ##### -->
<para>
Evaluates to %TRUE if @c does not have any parent, %FALSE otherwise.
</para>

@c: a #FttCell.


<!-- ##### MACRO FTT_CELL_IS_LEAF ##### -->
<para>
Evaluates to %TRUE if @c does not have any children, %FALSE otherwise.
</para>

@c: a #FttCell.


<!-- ##### MACRO FTT_CELL_ID ##### -->
<para>
Evaluates to the child index of @c.
</para>

@c: a #FttCell.


<!-- ##### MACRO FTT_OPPOSITE_INDEX ##### -->
<para>
Evaluates to the index of the neighboring direction opposite to @i.
</para>

@i: a neighboring direction index.


<!-- ##### FUNCTION ftt_cell_new ##### -->
<para>

</para>

@init: 
@data: 
@Returns: 


<!-- ##### USER_FUNCTION FttCellInitFunc ##### -->
<para>
This function is used to initialize extra user data associated with @cell. For example to allocate extra memory, initialize user-defined variables etc...
</para>

@cell: a #FttCell.
@data: user-data passed to the function.


<!-- ##### FUNCTION ftt_cell_check ##### -->
<para>

</para>

@cell: 
@Returns: 


<!-- ##### FUNCTION ftt_cell_refine ##### -->
<para>

</para>

@root: 
@refine: 
@refine_data: 
@init: 
@init_data: 


<!-- ##### USER_FUNCTION FttCellRefineFunc ##### -->
<para>
This function is used to control the refinement process of a cell tree.
</para>

@cell: a #FttCell.
@data: user-data passed to the function.
@Returns: %TRUE if @cell must be refined, %FALSE otherwise.


<!-- ##### FUNCTION ftt_refine_corner ##### -->
<para>

</para>

@cell: 
@Returns: 


<!-- ##### FUNCTION ftt_cell_locate ##### -->
<para>

</para>

@root: 
@target: 
@max_depth: 
@Returns: 


<!-- ##### FUNCTION ftt_cell_traverse ##### -->
<para>

</para>

@root: 
@order: 
@flags: 
@max_depth: 
@func: 
@data: 


<!-- ##### ENUM FttTraverseType ##### -->
<para>
Controls the sequence in which the traversal is performed.
</para>

@FTT_PRE_ORDER: Visits the parent cell and then its children.
@FTT_POST_ORDER: Visits each children and then their parent.

<!-- ##### ENUM FttTraverseFlags ##### -->
<para>
Controls the type of cell to visit.
</para>

@FTT_TRAVERSE_LEAFS: Visits only the cells which are leaves of the cell tree.
@FTT_TRAVERSE_NON_LEAFS: Visits only the cells which are not leaves of the cell tree.
@FTT_TRAVERSE_LEVEL: If %FTT_TRAVERSE_LEAFS is also set, visit the leafs of the cell tree and all the cells at level @max_depth. If %FTT_TRAVERSE_NON_LEAFS is also set, visits only the non-leaf cells at level @max_depth. Otherwise, visits all the cells at level @max_depth.
@FTT_TRAVERSE_ALL: Visits all the cells of the cell tree.

<!-- ##### USER_FUNCTION FttCellTraverseFunc ##### -->
<para>
This functions is called by ftt_cell_traverse() for each of the visited cells.
</para>

@cell: a #FttCell.
@data: user-data passed to the function.


<!-- ##### MACRO ftt_cell_level ##### -->
<para>
Evaluates to the level of @c.
</para>

@c: a #FttCell.


<!-- ##### FUNCTION ftt_cell_depth ##### -->
<para>

</para>

@root: 
@Returns: 


<!-- ##### MACRO ftt_cell_parent ##### -->
<para>
Evaluates to the parent of @c. %NULL is @c is a root cell.
</para>

@c: a #FttCell.


<!-- ##### FUNCTION ftt_cell_pos ##### -->
<para>

</para>

@cell: 
@pos: 


<!-- ##### FUNCTION ftt_level_size ##### -->
<para>

</para>

@level: 
@Returns: 


<!-- ##### FUNCTION ftt_cell_size ##### -->
<para>

</para>

@cell: 
@Returns: 


<!-- ##### FUNCTION ftt_cell_children ##### -->
<para>

</para>

@cell: 
@children: 


<!-- ##### STRUCT FttCellChildren ##### -->
<para>

</para>

@c: 

<!-- ##### FUNCTION ftt_cell_children_direction ##### -->
<para>

</para>

@cell: 
@d: 
@children: 


<!-- ##### FUNCTION ftt_cell_neighbors ##### -->
<para>

</para>

@cell: 
@neighbors: 


<!-- ##### STRUCT FttCellNeighbors ##### -->
<para>

</para>

@c: 

<!-- ##### FUNCTION ftt_cell_neighbor ##### -->
<para>

</para>

@cell: 
@d: 
@Returns: 


<!-- ##### FUNCTION ftt_cell_write ##### -->
<para>

</para>

@root: 
@max_depth: 
@fp: 
@write: 


<!-- ##### USER_FUNCTION FttCellWriteFunc ##### -->
<para>
Writes in @fp any user data associated with @cell. It is important that this function does not output any newline caracter ('\n').
</para>

@cell: a #FttCell.
@fp: a file pointer.


<!-- ##### FUNCTION ftt_cell_read ##### -->
<para>

</para>

@fp: 
@read: 
@line: 
@Returns: 


<!-- ##### USER_FUNCTION FttCellReadFunc ##### -->
<para>
Reads in any user data associated with @cell from file @fp and initializes the corresponding fields.
</para>

@cell: a #FttCell.
@fp: a file pointer.
@Returns: the last caracter read from @fp.


<!-- ##### FUNCTION ftt_cell_draw ##### -->
<para>

</para>

@cell: 
@fp: 


<!-- ##### FUNCTION ftt_cell_destroy ##### -->
<para>

</para>

@cell: 
@cleanup: 


<!-- ##### USER_FUNCTION FttCellCleanupFunc ##### -->
<para>
Performs any cleanup action needed for the user data associated with @cell prior to its destruction (example: freeing extra memory allocated at cell creation using a #FttCellInitFunc function).
</para>

@cell: a #FttCell about to be destroyed.


