<!-- ##### SECTION Title ##### -->
Functions

<!-- ##### SECTION Short_Description ##### -->
Values varying in space and time

<!-- ##### SECTION Long_Description ##### -->
<para>
Functions can be used in most objects which require a numerical parameter. A function can be either a constant or a piece of C code taking coordinates (x,y,z) and time t as arguments and returning a floating-point value.
</para>
<para>
The syntax in parameter files is as follows:
<informalexample>
<programlisting>
-1.78e-3
</programlisting>
</informalexample>
or a C function
<informalexample>
<programlisting>
{
  double a = sin (x + y);
  double b = cos (x - z);
  double c = sin (M_PI*t);
  return a + b + c;
}
</programlisting>
</informalexample>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### MACRO GFS_FUNCTION_CLASS ##### -->
<para>

</para>

@klass: 


<!-- ##### MACRO GFS_FUNCTION ##### -->
<para>

</para>

@obj: 


<!-- ##### MACRO GFS_IS_FUNCTION ##### -->
<para>

</para>

@obj: 


<!-- ##### STRUCT GfsFunctionClass ##### -->
<para>

</para>

@parent_class: 

<!-- ##### STRUCT GfsFunction ##### -->
<para>

</para>


<!-- ##### FUNCTION gfs_function_class ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gfs_function_new ##### -->
<para>

</para>

@klass: 
@val: 
@Returns: 


<!-- ##### FUNCTION gfs_function_face_value ##### -->
<para>

</para>

@f: 
@fa: 
@t: 
@Returns: 


<!-- ##### FUNCTION gfs_function_value ##### -->
<para>

</para>

@f: 
@cell: 
@p: 
@t: 
@Returns: 


<!-- ##### FUNCTION gfs_function_read ##### -->
<para>

</para>

@f: 
@domain: 
@fp: 


<!-- ##### FUNCTION gfs_function_write ##### -->
<para>

</para>

@f: 
@fp: 


